boss health bar display during boss blattle (modify that box and its linked variable)
idPlayer::StartBossBattle

player.cpp
	// FIXME: this is temp to allow the sound meter to show up in the hud
	// it should be commented out before shipping but the code can remain
	// for mod developers to enable for the same functionality
	_hud->SetStateInt( "s_debug", cvarSystem->GetCVarInteger( "s_showLevelMeter" ) );

printing a message to the console???
from projectile.cpp
common->DPrintf( "Projectile collision no impact\n" );

for necromancer:
aifl.dead = false;
idAI::CheckForTeammateEnemy( void )
idAI::CheckForEnemy ( bool useFov, bool force )
idAI::FindEnemy ( bool inFov, bool forceNearest, float maxDistSqr )
	

if ( ReactionTo( player ) & ATTACK_ON_ACTIVATE ) {
	SetEnemy( player );
}
idAI::ReactionTo( const idEntity *ent ) //checks what team the AI is on 

EXTRA: when casting magic place different color QUAD DAMAGE auras on player
interupts the State_Dead countdown to burn 
gives the entity health
unragdolls them (as per paralysis bombs)
tether's them to the player as a friendly 
marks it as an enemy of the enemies (like the NPC followers are)


	// Make sure all animations stop
	animator.ClearAllAnims ( gameLocal.time, 0 );


idAI::Killed
idActor::Damage
	STATE ( "State_Killed",					idAI::State_Killed )
	STATE ( "State_Dead",					idAI::State_Dead )
	STATE ( "State_LightningDeath",			idAI::State_LightningDeath )
	STATE ( "State_Burn",					idAI::State_Burn )
	STATE ( "State_Remove",
burnDelay
fl.quickBurn
InterruptState(...)
PostState
SetState


STEPS IN ORDER:
0-change the lightning gun's model/animations to that of the gauntlet, then delete the gauntlet so all thats shown is the player puncing
0'-get the fist position in the animaion to set the starting  point of the hitscan (muzzleOrigin is set in rvWeapon::Attack)
1-when ApplyImpulse is called in collide???...no, thats projectile...but similar => set the hit entity aifl.dead = false
2-
3-
4-
5-



idPlayer::Weapon_Combat updates the hud information and fires the weapon based on player BUTTON_ATTACK
also use EvaluateControls in the idPlayer::Think()

//SPAWN A NEW ENEMY

	yaw = player->viewAngles.yaw;

	value = args.Argv( 1 );
	dict.Set( "classname", value );
	dict.Set( "angle", va( "%f", yaw + 180 ) );

	org = player->GetPhysics()->GetOrigin() + idAngles( 0, yaw, 0 ).ToForward() * 80 + idVec3( 0, 0, 1 );
	dict.Set( "origin", org.ToString() );

	idEntity *newEnt = NULL;
	gameLocal.SpawnEntityDef( dict, &newEnt );

	if (newEnt)	{
		gameLocal.Printf("spawned entity '%s'\n", newEnt->name.c_str());
	}
